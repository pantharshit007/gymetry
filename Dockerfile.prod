# syntax=docker/dockerfile:1
ARG NODE_VERSION=18.20.4
ARG PNPM_VERSION=9.15.4

FROM node:${NODE_VERSION}-alpine AS base

RUN apk add --no-cache libc6-compat python3 make g++
WORKDIR /app

RUN --mount=type=cache,target=/root/.npm \
    npm install -g pnpm@${PNPM_VERSION}
COPY package.json pnpm-lock.yaml ./

# DEPENDENCIES STAGE
FROM base AS deps

COPY ./prisma ./prisma/
RUN --mount=type=cache,target=/root/.local/share/pnpm/store \
    pnpm install --frozen-lockfile

# BUILDER STAGE
FROM deps AS builder
WORKDIR /app

COPY --from=deps /app/node_modules ./node_modules
COPY . .
COPY .env.example .env

ENV NEXT_TELEMETRY_DISABLED=1
RUN pnpm run build

# PRODUCTION STAGE
FROM node:${NODE_VERSION}-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

CMD ["node", "server.js"]
